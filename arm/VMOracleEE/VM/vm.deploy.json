{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"location": {
			"type": "string",
			"metadata": {
				"displayName": "Azure region",
				"description": "The Azure region within which to deploy. Examples: 'eastus', 'westus', and so on. See https://azure.microsoft.com/regions/."
			}
		},
		"availabilitySetName": {
			"type": "string",
			"metadata": {
				"displayName": "Availability set",
				"description": "A managed availability set to which to join the VM. If the availability set does not yet exist, it will be created."
			}
		},
		"virtualMachineName": {
			"type": "string",
			"metadata": {
				"displayName": "Virtual Machine name",
				"description": "The VM name. Should be unique within the resource group."
			}
		},
		"virtualMachineSize": {
			"type": "string",
			"metadata": {
				"displayName": "Virtual Machine size",
				"description": "The VM size. See https://docs.microsoft.com/en-us/azure/virtual-machines/linux/sizes or use Azure CLI command 'az vm list-sizes'."
			}
		},
		"publisher": {
			"type": "string",
			"metadata": {
				"displayName": "Publisher",
				"description": "CLI: az vm image list-publishers -l [Azure region]"
			}
		},
		"offer": {
			"type": "string",
			"metadata": {
				"displayName": "Offer",
				"description": "CLI: az vm image list-offers -l [Azure region] --publisher [Publisher]. For Windows 10, use Windows-10"
			}
		},
		"sku": {
			"type": "string",
			"metadata": {
				"displayName": "SKU",
				"description": "CLI: az vm image list-skus -l [Azure region] --publisher [Publisher] --offer [Offer]"
			}
		},
		"version": {
			"type": "string",
			"defaultValue": "latest",
			"metadata": {
				"displayName": "Version",
				"description": "Image version. Typically use latest."
			}
		},
		"adminUsername": {
			"type": "string",
			"metadata": {
				"displayName": "VM administrator username",
				"description": "VM administrator username"
			}
		},
		"adminPassword": {
			"type": "securestring",
			"metadata": {
				"displayName": "VM administrator password",
				"description": "VM administrator password"
			}
		},
		"sshKeyData": {
			"type": "string",
			"metadata": {
				"displayName": "SSH public key as a string",
				"description": "SSH public key as a string"
			}
		},
		"osDiskStorageType": {
			"type": "string",
			"allowedValues": [
				"Standard_LRS",
				"Premium_LRS"
			],
			"defaultValue": "Premium_LRS",
			"metadata": {
				"displayName": "OS disk storage type",
				"description": "OS disk storage type. Standard_LRS uses HDD storage, Premium_LRS uses SSD storage"
			}
		},
		"osDiskSizeInGB": {
			"type": "int",
			"defaultValue": 128,
			"minValue": 32,
			"maxValue": 1023,
			"metadata": {
				"displayName": "OS disk size",
				"description": "OS disk size in GB"
			}
		},
		"dataDiskStorageType": {
			"type": "string",
			"allowedValues": [
				"Standard_LRS",
				"Premium_LRS"
			],
			"defaultValue": "Premium_LRS",
			"metadata": {
				"displayName": "Data disk storage type",
				"description": "Data disk storage type. Standard_LRS uses HDD storage, Premium_LRS uses SSD storage"
			}
		},
		"dataDiskCount": {
			"type": "int",
			"defaultValue": 1,
			"metadata": {
				"displayName": "Number of data disks",
				"description": "Number of data disks to attach to the VM. At this writing, ARM template language requires an integer 1-800 for loops; less than or equal to 0 (zero) is not allowed."
			}
		},
		"dataDiskSizeInGB": {
			"type": "int",
			"defaultValue": 1023,
			"minValue": 32,
			"maxValue": 1023,
			"metadata": {
				"displayName": "Data disk size",
				"description": "Data disk size in GB. Each data disk will be created at this size"
			}
		},
		"recoDiskStorageType": {
			"type": "string",
			"allowedValues": [
				"Standard_LRS",
				"Premium_LRS"
			],
			"defaultValue": "Premium_LRS",
			"metadata": {
				"displayName": "Reco disk storage type",
				"description": "Reco disk storage type. Standard_LRS uses HDD storage, Premium_LRS uses SSD storage"
			}
		},
		"recoDiskCount": {
			"type": "int",
			"defaultValue": 1,
			"metadata": {
				"displayName": "Number of reco disks",
				"description": "Number of reco disks to attach to the VM. At this writing, ARM template language requires an integer 1-800 for loops; less than or equal to 0 (zero) is not allowed."
			}
		},
		"recoDiskSizeInGB": {
			"type": "int",
			"defaultValue": 1023,
			"minValue": 32,
			"maxValue": 1023,
			"metadata": {
				"displayName": "Reco disk size",
				"description": "Reco disk size in GB. Each data disk will be created at this size"
			}
		},
		"resourceGroupNameNetwork": {
			"type": "string",
			"metadata": {
				"displayName": "Resource Group for networking resources",
				"description": "The Resource Group that contains the VNet, subnet, and NSG to use. Can be the same as the Resource Group where the VM will be deployed, or can refer to a separate Resource Group which contains durable networking resources."
			}
		},
		"virtualNetworkName": {
			"type": "string",
			"metadata": {
				"displayName": "VNet",
				"description": "Virtual network into which to deploy the VM"
			}
		},
		"subnetName": {
			"type": "string",
			"metadata": {
				"displayName": "Subnet",
				"description": "Subnet into which to deploy the VM"
			}
		},
		"resourceGroupNameDiagnostics": {
			"type": "string",
			"metadata": {
				"displayName": "Resource Group for VM diagnostics",
				"description": "The Resource Group that contains the standard storage account to which VM diagnostic data will be written. Can be the same as the Resource Group where the VM will be deployed, or can refer to a separate Resource Group which contains durable and/or centralized diagnostics resources."
			}
		},
		"diagnosticsStorageAccountName": {
			"type": "string",
			"metadata": {
				"displayName": "Storage Account for VM diagnostics",
				"description": "The standard storage account to which VM diagnostics data will be written."
			}
		}
	},
	"variables": {
		"vnetId": "[resourceId(parameters('resourceGroupNameNetwork'), 'Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]",
		"subnetReference": "[concat(variables('vnetId'), '/subnets/', parameters('subnetName'))]",
		"uniqueDnsLabelPrefix": "[concat(parameters('virtualMachineName'), uniquestring(resourceGroup().id))]",
		"osDiskName": "[concat(parameters('virtualMachineName'), '_os')]",
		"diskGroup1Prefix": "[concat(parameters('virtualMachineName'), '_data_')]",
		"diskGroup2Prefix": "[concat(parameters('virtualMachineName'), '_reco_')]",
		"ipConfigName": "ipconfig1",
		"networkInterfaceName": "[concat(parameters('virtualMachineName'), '_nic')]",
		"computeApiVersion": "2017-03-30",
		"networkApiVersion": "2018-08-01",
		"storageApiVersion": "2018-07-01"
	},
	"resources": [
		{
			"type": "Microsoft.Compute/availabilitySets",
			"sku": {
				"name": "Aligned"
			},
			"name": "[parameters('availabilitySetName')]",
			"apiVersion": "[variables('computeApiVersion')]",
			"location": "[parameters('location')]",
			"scale": null,
			"properties": {
				"platformUpdateDomainCount": 5,
				"platformFaultDomainCount": 3,
				"virtualMachines": []
			},
			"dependsOn": []
		},
		{
			"name": "[parameters('virtualMachineName')]",
			"type": "Microsoft.Compute/virtualMachines",
			"apiVersion": "[variables('computeApiVersion')]",
			"location": "[parameters('location')]",
			"dependsOn": [
				"[concat('Microsoft.Network/networkInterfaces/', variables('networkInterfaceName'))]"
			],
			"properties": {
				"availabilitySet": {
					"id": "[resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName'))]"
				},
				"osProfile": {
					"computerName": "[parameters('virtualMachineName')]",
					"adminUsername": "[parameters('adminUsername')]",
					"adminPassword": "[parameters('adminPassword')]",
					"linuxConfiguration": {
						"disablePasswordAuthentication": false,
						"ssh": {
							"publicKeys": [
								{
									"path": "[concat('/home/', parameters('adminUsername'), '/.ssh/authorized_keys')]",
									"keyData": "[parameters('sshKeyData')]"
								}
							]
						}
					}
				},
				"hardwareProfile": {
					"vmSize": "[parameters('virtualMachineSize')]"
				},
				"storageProfile": {
					"imageReference": {
						"publisher": "[parameters('publisher')]",
						"offer": "[parameters('offer')]",
						"sku": "[parameters('sku')]",
						"version": "[parameters('version')]"
					},
					"osDisk": {
						"createOption": "FromImage",
						"name": "[variables('osDiskName')]",
						"diskSizeGB": "[parameters('osDiskSizeInGB')]",
						"managedDisk": {
							"storageAccountType": "[parameters('osDiskStorageType')]"
						}
					},
					"copy": [
						{
							"name": "dataDisks",
							"count": "[add(parameters('dataDiskCount'), parameters('recoDiskCount'))]",
							"input": {
								"lun": "[copyIndex('dataDisks')]",
								"createOption": "Empty",
								"name": "[if(lessOrEquals(copyIndex('dataDisks', 1), parameters('dataDiskCount')), concat(variables('diskGroup1Prefix'), copyIndex('dataDisks', 1)), concat(variables('diskGroup2Prefix'), sub(copyIndex('dataDisks', 1), parameters('dataDiskCount'))))]",
								"diskSizeGB": "[if(lessOrEquals(copyIndex('dataDisks', 1), parameters('dataDiskCount')), parameters('dataDiskSizeInGB'), parameters('recoDiskSizeInGB'))]",
								"managedDisk": {
									"storageAccountType": "[if(lessOrEquals(copyIndex('dataDisks', 1), parameters('dataDiskCount')), parameters('dataDiskStorageType'), parameters('recoDiskStorageType'))]"
								}
							}
						}
					]
				},
				"networkProfile": {
					"networkInterfaces": [
						{
							"id": "[resourceId('Microsoft.Network/networkInterfaces', variables('networkInterfaceName'))]"
						}
					]
				},
				"diagnosticsProfile": {
					"bootDiagnostics": {
						"enabled": true,
						"storageUri": "[reference(resourceId(parameters('resourceGroupNameDiagnostics'), 'Microsoft.Storage/storageAccounts', parameters('diagnosticsStorageAccountName')), variables('storageApiVersion')).primaryEndpoints['blob']]"
					}
				}
			},
			"resources": []
		},
		{
			"name": "[variables('networkInterfaceName')]",
			"type": "Microsoft.Network/networkInterfaces",
			"apiVersion": "[variables('networkApiVersion')]",
			"location": "[parameters('location')]",
			"properties": {
				"enableAcceleratedNetworking": true,
				"ipConfigurations": [
					{
						"name": "[variables('ipConfigName')]",
						"properties": {
							"subnet": {
								"id": "[variables('subnetReference')]"
							},
							"privateIPAllocationMethod": "Dynamic"
						}
					}
				],
				"dnsSettings": {
					"internalDnsNameLabel": "[variables('uniqueDnsLabelPrefix')]",
					"dnsServers": []
				}
			}
		}
	],
	"outputs": {
		"privateIpAddress": {
			"type": "string",
			"value": "[reference(variables('networkInterfaceName')).ipConfigurations[0].properties.privateIPAddress]"
		},
		"appliedDnsServers": {
			"type": "array",
			"value": "[reference(variables('networkInterfaceName')).dnsSettings.appliedDnsServers]"
		},
		"dnsServers": {
			"type": "array",
			"value": "[reference(variables('networkInterfaceName')).dnsSettings.dnsServers]"
		},
		"internalDnsNameLabel": {
			"type": "string",
			"value": "[reference(variables('networkInterfaceName')).dnsSettings.internalDnsNameLabel]"
		},
		"internalDomainNameSuffix": {
			"type": "string",
			"value": "[reference(variables('networkInterfaceName')).dnsSettings.internalDomainNameSuffix]"
		},
		"internalFqdn": {
			"type": "string",
			"value": "[reference(variables('networkInterfaceName')).dnsSettings.internalFqdn]"
		}
	}
}